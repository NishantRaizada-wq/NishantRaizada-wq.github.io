if (window.innerWidth < 768) {
	$('[data-bss-disabled-mobile]').removeClass('animated').removeAttr('data-aos data-bss-hover-animate');
}

$(document).ready(function(){
	AOS.init();
});
(function($) {
  "use strict"; // Start of use strict

  // Closes the sidebar menu
  $(".menu-toggle").click(function(e) {
    e.preventDefault();
    $("#sidebar-wrapper").toggleClass("active");
    $(".menu-toggle > .fa-bars, .menu-toggle > .fa-times").toggleClass("fa-bars fa-times");
    $(this).toggleClass("active");
  });

  // Smooth scrolling using jQuery easing
  $('a.js-scroll-trigger[href*="#"]:not([href="#"])').click(function() {
    if (location.pathname.replace(/^\//, '') == this.pathname.replace(/^\//, '') && location.hostname == this.hostname) {
      var target = $(this.hash);
      target = target.length ? target : $('[name=' + this.hash.slice(1) + ']');
      if (target.length) {
        $('html, body').animate({
          scrollTop: target.offset().top
        }, 1000, "easeInOutExpo");
        return false;
      }
    }
  });

  // Closes responsive menu when a scroll trigger link is clicked
  $('#sidebar-wrapper .js-scroll-trigger').click(function() {
    $("#sidebar-wrapper").removeClass("active");
    $(".menu-toggle").removeClass("active");
    $(".menu-toggle > .fa-bars, .menu-toggle > .fa-times").toggleClass("fa-bars fa-times");
  });

  // Scroll to top button appear
  $(document).scroll(function() {
    var scrollDistance = $(this).scrollTop();
    if (scrollDistance > 100) {
      $('.scroll-to-top').fadeIn();
    } else {
      $('.scroll-to-top').fadeOut();
    }
  });

})(jQuery); // End of use strict

// Disable Google Maps scrolling
// See http://stackoverflow.com/a/25904582/1607849
// Disable scroll zooming and bind back the click event
var onMapMouseleaveHandler = function(event) {
  var that = $(this);
  that.on('click', onMapClickHandler);
  that.off('mouseleave', onMapMouseleaveHandler);
  that.find('iframe').css("pointer-events", "none");
}
var onMapClickHandler = function(event) {
  var that = $(this);
  // Disable the click handler until the user leaves the map area
  that.off('click', onMapClickHandler);
  // Enable scrolling zoom
  that.find('iframe').css("pointer-events", "auto");
  // Handle the mouse leave event
  that.on('mouseleave', onMapMouseleaveHandler);
}
// Enable map zooming with mouse scroll when the user clicks the map
$('.map').on('click', onMapClickHandler);


class Comment extends React.Component  {

    constructor(props) {
       super(props);
       this.edit = this.edit.bind(this);
       this.save = this.save.bind(this);
       this.remove = this.remove.bind(this);
       this.state = {editing: false};
     }
   
   edit(){
     this.setState({ editing:true })
   }
   
   save(){
     console.log( this.newText.value);
     var newText = this.newText.value;
     this.props.updateCommentFromBoard(newText ,this.props.index);
     this.setState({ editing:false })
   }
   
   remove(){
    this.props.removeCommentFromBoard(this.props.index);  
   }
   
   renderNormalMode(){
     return(
       <div className="commentContainer">
         <div className="commentText">{this.props.children}</div>       
        <button onClick={this.edit} className="btn btn-comment">
           <span className="fa fa-pencil fa-2x"></span>
          </button>
         <button onClick={this.remove} className="btn btn-comment">
           <span className="fa fa-trash fa-2x"></span>
          </button>
       </div>
     );
   }
   
   renderEditingMode(){
     return(
       <div className="commentContainer">
         <div className="commentText">
           <textarea 
             ref={ (input) => { this.newText = input; } } 
                   onChange={this.handleChange}        
                   defaultValue={this.props.children}> 
           </textarea>
         </div>
                       
        <button onClick={this.save} className="btn-comment">
           <span className="fa fa-floppy-o fa-2x"></span>
          </button>
       </div>
     );
     
   }
   
   render(){ 
      if(this.state.editing){ 
        return this.renderEditingMode();
      }else{
        return this.renderNormalMode();
      }
   }
  
 }
 
 
 class Board extends React.Component  {
   
    constructor(props) {
      super(props);
      this.displayComments = this.displayComments.bind(this);
      this.updateComment = this.updateComment.bind(this);
      this.removeComment = this.removeComment.bind(this);
      this.addNewComment = this.addNewComment.bind(this);
      this.state = {comments:[]};
     }
   
   removeComment(idx){
     var arr = this.state.comments;
     arr.splice(idx,1)
     this.setState({comments: arr});
   }
   
   updateComment(newText,idx){
     var arr = this.state.comments;
     arr[idx] = newText;
     this.setState({comments: arr})
   }
   
   addNewComment(){
     var newText = $('#shareCommentText').val();
     if(newText !== ""){
       var arr = this.state.comments;
       arr.push(newText);
       this.setState({comments: arr})
     }
     else alert("Please write a comment to share!")
     
   }
   
     displayComments(text,i){
     return(
       <Comment
         key={i} 
         index={i} 
         removeCommentFromBoard ={this.removeComment} 
         updateCommentFromBoard ={this.updateComment}
         >{text}</Comment>
      );
   }
   render(){
     return(
       <div className="board">
         <div className="shareCommentContainer">
           <textarea id="shareCommentText" placeholder="Write a comment.."></textarea> 
           <button onClick={this.addNewComment} className="btn btn-success"> Share</button>
         </div>
         
         {this.state.comments.map(this.displayComments)}
       </div>
     );
   }
   
 }
 
 ReactDOM.render(
   <Board/>,
   document.getElementById('root')
 );